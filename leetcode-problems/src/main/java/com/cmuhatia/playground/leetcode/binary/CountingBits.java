package com.cmuhatia.playground.leetcode.binary;


import lombok.AccessLevel;
import lombok.NoArgsConstructor;

/**
 * <p>
 * Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.
 * </p>
 *
 * <p>
 *
 * @see <a href="https://leetcode.com/problems/counting-bits/">Counting Bits</a>
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class CountingBits {


    /**
     * Generated by <a href="https://codeium.com/">Codeium</a>
     */
    public static int[] of(int n) {
        int[] ans = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            // ans[i >> 1] is equivalent to dividing i by 2.
            // (i & 1) gets the last bit of i (0 or 1) which is the remainder when dividing i by 2.
            ans[i] = ans[i >> 1] + (i & 1);
        }

        return ans;
    }

    public static int[] of2(int n) {
        int[] ans = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            ans[i] = countBits(i);
        }

        return ans;
    }

    public static int countBits(int n) {
        int count = 0;
        while (n > 0) {
            int bit = n % 2;
            if (bit == 1) {
                count++;
            }
            n = n / 2;
        }

        return count;
    }
}
